#
# USB Host Controller Drivers
#
comment "USB Host Controller Drivers"
	depends on USB

config USB_EHCI_HCD
	tristate "EHCI HCD (USB 2.0) support"
	depends on USB && USB_ARCH_HAS_EHCI
	---help---
	  The Enhanced Host Controller Interface (EHCI) is standard for USB 2.0
	  "high speed" (480 Mbit/sec, 60 Mbyte/sec) host controller hardware.
	  If your USB host controller supports USB 2.0, you will likely want to
	  configure this Host Controller Driver.  At the time of this writing, 
	  the primary implementation of EHCI is a chip from NEC, widely available
	  in add-on PCI cards, but implementations are in the works from other 
	  vendors including Intel and Philips.  Motherboard support is appearing.

	  EHCI controllers are packaged with "companion" host controllers (OHCI
	  or UHCI) to handle USB 1.1 devices connected to root hub ports.  Ports
	  will connect to EHCI if the device is high speed, otherwise they
	  connect to a companion controller.  If you configure EHCI, you should
	  probably configure the OHCI (for NEC and some other vendors) USB Host
	  Controller Driver or UHCI (for Via motherboards) Host Controller
	  Driver too.

	  You may want to read <file:Documentation/usb/ehci.txt>.

	  To compile this driver as a module, choose M here: the
	  module will be called ehci-hcd.

config USB_EHCI_ARC
	bool "Support for Freescale controller"
	depends on USB_EHCI_HCD && ARCH_MXC
	---help---
	   Some Freescale processors have an integrated High Speed
	   USBOTG controller, which supports EHCI host mode.

	   Say "y" here to add support for this controller
	   to the EHCI HCD driver.

config USB_EHCI_ARC_H1
	bool "Support for Host1 port on Freescale controller"
	depends on USB_EHCI_ARC && ARCH_MX2
	---help---
	  Enable support for the USB Host1 port.

config USB_EHCI_ARC_H2
	bool "Support for Host2 port on Freescale controller"
	depends on USB_EHCI_ARC && \
           (ARCH_MX2 && !SPI_MXC_SELECT1 && !SPI_MXC_SELECT2)
	---help---
	  Enable support for the USB Host2 port.

config USB_EHCI_ARC_OTG
	bool "Support for OTG host port on Freescale controller"
	depends on USB_EHCI_ARC
	default y
	---help---
	  Enable support for the USB OTG port in HS/FS Host mode.

choice
	prompt "Select OTG transceiver"
	depends on USB_EHCI_ARC_OTG
	default USB_EHCI_FSL_1301 if ARCH_MX2
	---help---
	  Choose the transceiver to use with the Freescale OTG port.

config USB_EHCI_FSL_MC13783
	bool "Freescale MC13783"
	---help---
	  Enable support for the Full Speed Freescale MC13783 transceiver.

	  The mx27ads, mx31ads and mx32ads boards require modifications
	  to support this transceiver.

config USB_EHCI_FSL_1301
	bool "Philips ISP1301"
	---help---
	  Enable support for the Full Speed Philips ISP1301 transceiver.

	  This is the factory default for the mx27ads board.
	  The mx31ads and mx32ads boards require modifications
	  to support this transceiver.

config USB_EHCI_FSL_1504
	bool "Philips ISP1504"
	---help---
	  Enable support for the High Speed Philips ISP1504 transceiver.

	  This is the factory default for the mx31ads and mx32ads boards.
	  The mx27ads board requires modifications to support this transceiver.

endchoice


config USB_EHCI_SPLIT_ISO
	bool "Full speed ISO transactions (EXPERIMENTAL)"
	depends on USB_EHCI_HCD && EXPERIMENTAL
	default n
	---help---
	  This code is new and hasn't been used with many different
	  EHCI or USB 2.0 transaction translator implementations.
	  It should work for ISO-OUT transfers, like audio.

config USB_EHCI_ROOT_HUB_TT
	bool "Root Hub Transaction Translators (EXPERIMENTAL)"
	depends on USB_EHCI_HCD && EXPERIMENTAL
	default y if USB_EHCI_ARC
	---help---
	  Some EHCI chips have vendor-specific extensions to integrate
	  transaction translators, so that no OHCI or UHCI companion
	  controller is needed.  It's safe to say "y" even if your
	  controller doesn't support this feature.

	  This supports the EHCI implementation that's originally
	  from ARC, and has since changed hands a few times.

config USB_EHCI_TT_NEWSCHED
	bool "Improved Transaction Translator scheduling (EXPERIMENTAL)"
	depends on USB_EHCI_HCD && EXPERIMENTAL
	---help---
	  This changes the periodic scheduling code to fill more of the low
	  and full speed bandwidth available from the Transaction Translator
	  (TT) in USB 2.0 hubs.  Without this, only one transfer will be
	  issued in each microframe, significantly reducing the number of
	  periodic low/fullspeed transfers possible.

	  If you have multiple periodic low/fullspeed devices connected to a
	  highspeed USB hub which is connected to a highspeed USB Host
	  Controller, and some of those devices will not work correctly
	  (possibly due to "ENOSPC" or "-28" errors), say Y.

	  If unsure, say N.

config USB_EHCI_BIG_ENDIAN_MMIO
	bool
	depends on USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX)
	default y

config USB_EHCI_BIG_ENDIAN_DESC
	bool
	depends on USB_EHCI_HCD && (440EPX || ARCH_IXP4XX)
	default y

config USB_EHCI_FSL
	bool "Support for Freescale on-chip EHCI USB controller"
	select USB_EHCI_ROOT_HUB_TT
	depends on USB_EHCI_HCD && FSL_SOC
	---help---
	  Variation of ARC USB block used in some Freescale chips.

config USB_EHCI_HCD_PPC_OF
	bool "EHCI support for PPC USB controller on OF platform bus"
	depends on USB_EHCI_HCD && PPC_OF
	default y
	---help---
	  Enables support for the USB controller PowerPC present on the
	  OpenFirmware platform bus.

config USB_ISP116X_HCD
	tristate "ISP116X HCD support"
	depends on USB
	---help---
	  The ISP1160 and ISP1161 chips are USB host controllers. Enable this
	  option if your board has this chip. If unsure, say N.

	  This driver does not support isochronous transfers.

	  To compile this driver as a module, choose M here: the
	  module will be called isp116x-hcd.

config USB_OHCI_HCD
	tristate "OHCI HCD support"
	depends on USB && USB_ARCH_HAS_OHCI
	select ISP1301_OMAP if MACH_OMAP_H2 || MACH_OMAP_H3
	---help---
	  The Open Host Controller Interface (OHCI) is a standard for accessing
	  USB 1.1 host controller hardware.  It does more in hardware than Intel's
	  UHCI specification.  If your USB host controller follows the OHCI spec,
	  say Y.  On most non-x86 systems, and on x86 hardware that's not using a
	  USB controller from Intel or VIA, this is appropriate.  If your host
	  controller doesn't use PCI, this is probably appropriate.  For a PCI
	  based system where you're not sure, the "lspci -v" entry will list the
	  right "prog-if" for your USB controller(s):  EHCI, OHCI, or UHCI.

	  To compile this driver as a module, choose M here: the
	  module will be called ohci-hcd.

config USB_OHCI_HCD_PPC_SOC
	bool "OHCI support for on-chip PPC USB controller"
	depends on USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)
	default y
	select USB_OHCI_BIG_ENDIAN_DESC
	select USB_OHCI_BIG_ENDIAN_MMIO
	---help---
	  Enables support for the USB controller on the MPC52xx or
	  STB03xxx processor chip.  If unsure, say Y.

config USB_OHCI_HCD_PPC_OF
	bool "OHCI support for PPC USB controller on OF platform bus"
	depends on USB_OHCI_HCD && PPC_OF
	default y
	---help---
	  Enables support for the USB controller PowerPC present on the
	  OpenFirmware platform bus.

config USB_OHCI_HCD_PPC_OF_BE
	bool "Support big endian HC"
	depends on USB_OHCI_HCD_PPC_OF
	default y
	select USB_OHCI_BIG_ENDIAN_DESC
	select USB_OHCI_BIG_ENDIAN_MMIO

config USB_OHCI_HCD_PPC_OF_LE
	bool "Support little endian HC"
	depends on USB_OHCI_HCD_PPC_OF
	default n
	select USB_OHCI_LITTLE_ENDIAN

config USB_OHCI_HCD_PCI
	bool "OHCI support for PCI-bus USB controllers"
	depends on USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)
	default y
	select USB_OHCI_LITTLE_ENDIAN
	---help---
	  Enables support for PCI-bus plug-in USB controller cards.
	  If unsure, say Y.

config USB_OHCI_BIG_ENDIAN_DESC
	bool
	depends on USB_OHCI_HCD
	default n

config USB_OHCI_BIG_ENDIAN_MMIO
	bool
	depends on USB_OHCI_HCD
	default n

config USB_OHCI_LITTLE_ENDIAN
	bool
	depends on USB_OHCI_HCD
	default n if STB03xxx || PPC_MPC52xx
	default y

config USB_UHCI_HCD
	tristate "UHCI HCD (most Intel and VIA) support"
	depends on USB && PCI
	---help---
	  The Universal Host Controller Interface is a standard by Intel for
	  accessing the USB hardware in the PC (which is also called the USB
	  host controller). If your USB host controller conforms to this
	  standard, you may want to say Y, but see below. All recent boards
	  with Intel PCI chipsets (like intel 430TX, 440FX, 440LX, 440BX,
	  i810, i820) conform to this standard. Also all VIA PCI chipsets
	  (like VIA VP2, VP3, MVP3, Apollo Pro, Apollo Pro II or Apollo Pro
	  133). If unsure, say Y.

	  To compile this driver as a module, choose M here: the
	  module will be called uhci-hcd.

config USB_SL811_HCD
	tristate "SL811HS HCD support"
	depends on USB
	help
	  The SL811HS is a single-port USB controller that supports either
	  host side or peripheral side roles.  Enable this option if your
	  board has this chip, and you want to use it as a host controller. 
	  If unsure, say N.

	  To compile this driver as a module, choose M here: the
	  module will be called sl811-hcd.

config USB_SL811_CS
	tristate "CF/PCMCIA support for SL811HS HCD"
	depends on USB_SL811_HCD && PCMCIA
	help
	  Wraps a PCMCIA driver around the SL811HS HCD, supporting the RATOC
	  REX-CFU1U CF card (often used with PDAs).  If unsure, say N.

	  To compile this driver as a module, choose M here: the
	  module will be called "sl811_cs".

config USB_FHCI_HCD
	tristate "Freescale QE USB Host Controller support"
	depends on USB && GENERIC_GPIO && QUICC_ENGINE
	help
	  Some Freescale PowerPC processors (such as MPC8360E and
	  MPC8323) have a Full Speed or Low Speed QE USB Host controller.

	  Say "y" to enable support for such controllers, or "m" to compile
	  it as a module: the module will be called fhci-hcd.ko

config FHCI_DEBUG
	bool "Freescale QE USB Host Controller debug support"
	depends on USB_FHCI_HCD
	select DEBUG_FS
	help
	  Say "y" to see some FHCI debug information and statistics
	  throught debugfs.

choice
	prompt "FHCI interface type"
	depends on USB_FHCI_HCD
	default FHCI_WITH_TDS

config FHCI_WITH_BDS
	bool "Packet-Level interface (BDs)"
	depends on BROKEN
	help
	  Controller uses a packet-level interface to communicate.

config FHCI_WITH_TDS
	bool "Transaction-Level interface (TDs)"
	help
	  Controller uses a transaction-level interface to communicate.

endchoice
