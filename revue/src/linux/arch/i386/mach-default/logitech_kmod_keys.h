/*

1. Generate a key:

gpg --gen-key
gpg (GnuPG) 1.4.9; Copyright (C) 2008 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) DSA and Elgamal (default)
   (2) DSA (sign only)
   (5) RSA (sign only)
Your selection? 5
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 
Requested keysize is 2048 bits
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all
Is this correct? (y/N) y

You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and E-mail Address in this form:
    "Heinrich Heine (Der Dichter) <heinrichh@duesseldorf.de>"

Real name: testkey
E-mail address: testkey@logitech.com
Comment: 
You selected this USER-ID:
    "testkey <testkey@logitech.com>"

Change (N)ame, (C)omment, (E)-mail or (O)kay/(Q)uit? o
You need a Passphrase to protect your secret key.

gpg: gpg-agent is not available in this session
You don't want a passphrase - this is probably a *bad* idea!
I will do it anyway.  You can change your passphrase at any time,
using this program with the option "--edit-key".

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, use the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

Not enough random bytes available.  Please do some other work to give
the OS a chance to collect more entropy!  (Need 277 more bytes)
+++++
...........+++++
gpg: key E8F1F39E marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   3  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 3u
pub   2048R/E8F1F39E 2010-06-23
      Key fingerprint = B1AB 8F94 DF71 AE79 27CB  BE51 CCD5 5CC9 E8F1 F39E
uid                  testkey <testkey@logitech.com>

Note that this key cannot be used for encryption.  You may want to use
the command "--edit-key" to generate a subkey for this purpose.

2. Export public key:

gpg --export testkey > testkey.pub

3. Extract key and paste into this file:

./extract_pkey testkey.pub

*/

#include <linux/rsa_verify.h>

static const char ka3_key_n[258] = {
0x08,0x00,
0xbb,0x38,0xfa,0x6a,0xd5,0x6a,0x36,0xb7,0x51,0x24,0x65,0xbe,0xfb,0xb8,0xdf,0xc7,
0xd1,0xd1,0x0a,0x57,0xf6,0x9c,0xdc,0x31,0x74,0x7a,0x85,0x9b,0x70,0x3b,0xd2,0x34,
0xfe,0xe0,0x22,0xf1,0xed,0x87,0x68,0xf8,0xfe,0xc0,0x59,0xee,0x6f,0xa9,0x67,0x4f,
0xe1,0x0a,0xb6,0x38,0xc8,0xd1,0x8f,0xdd,0x72,0x9f,0xb7,0x57,0x48,0x8f,0x0f,0xd5,
0xa0,0x66,0xdf,0xaf,0x08,0x79,0x58,0x0b,0x82,0x3c,0x69,0xf3,0x89,0x47,0x0b,0x13,
0x38,0x3a,0x2e,0x16,0x36,0x6f,0x66,0x69,0x94,0xef,0x3d,0x48,0x50,0xdd,0xe2,0x03,
0x5e,0x64,0x42,0x59,0x91,0xc6,0xb9,0x7e,0x96,0x29,0xdd,0xaf,0x70,0x36,0x82,0xd2,
0x62,0x50,0x37,0xed,0x97,0x66,0xb6,0x5f,0xe7,0x70,0x73,0x21,0xfa,0x23,0xb0,0xf1,
0xe2,0xb3,0xd0,0x52,0x12,0xfa,0xdb,0x00,0xdd,0x26,0x13,0xe6,0x93,0x1f,0xe9,0xa2,
0xf0,0x17,0xe6,0x9c,0x8d,0xd4,0x9b,0x3a,0x25,0xc3,0x9c,0x45,0x57,0xc9,0xaa,0xa7,
0xcc,0x5c,0x71,0x27,0xd5,0x77,0x48,0xe8,0x61,0x92,0x96,0xd3,0x5a,0x0f,0xd2,0xf4,
0xc9,0x4c,0x6d,0xdb,0x46,0x86,0xa3,0xe2,0x9c,0x7e,0x42,0xbd,0x80,0x37,0xca,0x30,
0x81,0xe3,0x40,0xf4,0x7c,0x8d,0x95,0x2b,0xdd,0x19,0x15,0x3c,0x03,0x2b,0xa4,0x3c,
0xe1,0xd2,0x6f,0x29,0xaa,0x1f,0xad,0x8b,0x7b,0x46,0x36,0x22,0xa3,0x47,0x98,0xea,
0x30,0xb6,0xaf,0x34,0x46,0xb2,0x97,0x6a,0x80,0xbc,0x0b,0xe8,0x8c,0x23,0xc0,0xae,
0xf3,0x4d,0x0b,0x1e,0xe9,0x86,0xdd,0x8b,0xb6,0xf2,0x56,0x0a,0x0b,0x0c,0x15,0x17
};
static const char ka3_key_e[] = {
	0x00,0x11,0x01,0x00,0x01, 
};

static struct rsa_key ka3_rsa_key = {
	ka3_key_n,
	sizeof(ka3_key_n),
	ka3_key_e,
	sizeof(ka3_key_e),
};


static const char ka4_key_n[258] = {
0x08,0x00, 
0xcf,0x50,0x2b,0x3b,0x18,0x14,0x91,0xba,0xb5,0x71,0x2d,0xf4,0x57,0x93,0x6f,0xeb,
0xe3,0xf4,0x76,0xb8,0x61,0x18,0x94,0x07,0x94,0x8c,0x65,0x75,0xe8,0x71,0xcc,0x68,
0xd9,0x58,0xc7,0xdf,0x4f,0xba,0x5d,0x49,0x24,0x87,0x8d,0xf7,0x56,0xff,0x7c,0x61,
0xe2,0x9f,0x02,0x6f,0x53,0x9d,0x4a,0x97,0x28,0x75,0x40,0xe6,0x6d,0xcd,0xa3,0xc5,
0x0d,0xa6,0xc6,0x20,0x7c,0x06,0x8f,0x0c,0x0f,0xfa,0x26,0xa7,0xc3,0x17,0x66,0x94,
0x0c,0xb1,0xbf,0x45,0x07,0x2a,0x32,0xd3,0x1b,0x30,0x18,0xdd,0xcd,0xe1,0xb6,0xd4,
0x60,0x6a,0x31,0x74,0x2a,0xc2,0xa0,0x9b,0xdb,0x77,0x8f,0x9f,0xd3,0xa0,0xa2,0x6d,
0x37,0x27,0xde,0x68,0xaa,0x04,0xa4,0xa5,0xdb,0x4f,0x7f,0x52,0x52,0x34,0xa0,0x36,
0xf4,0xe4,0xd2,0xc1,0x49,0x7c,0xde,0xde,0x98,0x41,0x9b,0x8e,0xe9,0xa9,0x92,0x9b,
0xd2,0xef,0x51,0x48,0x74,0x32,0x30,0x33,0x6a,0x75,0x35,0x2a,0xd1,0x5b,0x6a,0x30,
0xd4,0x66,0x9c,0x75,0xa5,0xde,0x04,0xd4,0x4e,0x69,0x01,0x13,0x1b,0xa7,0x5e,0xa3,
0x6d,0xba,0xb7,0xf8,0x17,0x49,0xfc,0xf8,0x57,0xf8,0xeb,0xff,0xfe,0xde,0xa8,0x1b,
0xe2,0xe0,0xce,0x16,0x1b,0x9a,0xc8,0x61,0x53,0x28,0xbd,0xeb,0xd1,0x1f,0x29,0xc2,
0x69,0x57,0x69,0xf1,0xc1,0x3f,0xdd,0xa6,0x5f,0x01,0x05,0xe8,0xe0,0xc5,0x31,0x28,
0x05,0xa3,0x04,0x8d,0xe0,0xcc,0x54,0xda,0x3b,0x17,0xc0,0x08,0xec,0xa2,0x12,0xfa,
0xa5,0x95,0x0d,0xf2,0xc8,0x63,0x3e,0x22,0x3e,0xe0,0xd1,0x1d,0x65,0x27,0x28,0xe3
};
static const char ka4_key_e[] = {
	0x00,0x11,0x01,0x00,0x01, 
};

static struct rsa_key ka4_rsa_key = {
	ka4_key_n,
	sizeof(ka4_key_n),
	ka4_key_e,
	sizeof(ka4_key_e),
};


/* MP */

static const char ka5_key_n[258] = {
0x08,0x00,
0xba,0x8c,0x3c,0x2b,0xfd,0xad,0xe2,0xc4,0x7f,0xce,0xf6,0x6b,0xde,0xcb,0x6f,0xdb,
0x44,0x22,0x42,0x7d,0x5e,0xb9,0x6a,0xc6,0x60,0xc6,0xa6,0x55,0xe2,0x40,0x01,0x16,
0xa7,0xe3,0x84,0xba,0x43,0x50,0x2a,0x1e,0x1e,0x16,0xbc,0xe0,0x2e,0x8c,0xd0,0x2f,
0xc0,0xc1,0x45,0x23,0x2d,0x0c,0x2b,0x44,0x86,0xaf,0x46,0xf9,0x04,0xf2,0xdc,0x6e,
0xe2,0x04,0x38,0x07,0x97,0xc1,0x65,0x50,0x19,0xa6,0x39,0x46,0x49,0x47,0x00,0x50,
0xe7,0xb0,0x94,0x0c,0xb4,0x0f,0x41,0x50,0xd2,0x67,0xf0,0x1c,0x7b,0x65,0x2d,0x19,
0xc9,0x39,0x1f,0x02,0x2c,0x03,0x30,0x5d,0x69,0x94,0xe6,0x63,0x26,0x07,0xff,0x17,
0xbc,0x0f,0x6b,0xaa,0x60,0x10,0x39,0xa4,0xd1,0x66,0x97,0xdc,0x61,0x48,0x61,0xa6,
0xc3,0xd3,0x35,0xa6,0xc8,0xe2,0x56,0x78,0x24,0x26,0xe9,0x5e,0xf8,0x61,0xb0,0xed,
0x8b,0xab,0x8b,0x71,0xa5,0xf4,0x50,0xf3,0x60,0x43,0x40,0xd9,0xd1,0x8a,0x4e,0xca,
0x83,0xa2,0x56,0xb9,0x40,0x89,0x46,0x1d,0xe2,0x3e,0x4f,0x02,0xbd,0x9a,0x26,0xb1,
0xe8,0x52,0xde,0x6a,0x57,0x41,0x62,0x6b,0x47,0x57,0x9c,0x5c,0x90,0xdb,0xfa,0xa2,
0xd0,0x5d,0xf6,0x2c,0xf0,0xe3,0x97,0x70,0xba,0x50,0xa7,0x35,0x69,0x1c,0x26,0x34,
0x8f,0x46,0x61,0xcf,0xf4,0x0c,0x7f,0xb2,0x93,0x71,0x21,0x25,0x30,0xd2,0x85,0xd8,
0xc9,0x90,0xa0,0xd7,0x9a,0xa8,0xf6,0xdb,0xff,0x90,0xc3,0x86,0x7e,0x97,0xb2,0xb0,
0xf6,0x0d,0x34,0x25,0x32,0xea,0xea,0x62,0x31,0x81,0x6d,0xb3,0xe4,0x7a,0xb4,0x03 
};
static const char ka5_key_e[] = {
	0x00,0x11,0x01,0x00,0x01, 
};

static struct rsa_key ka5_rsa_key = {
	ka5_key_n,
	sizeof(ka5_key_n),
	ka5_key_e,
	sizeof(ka5_key_e),
};
